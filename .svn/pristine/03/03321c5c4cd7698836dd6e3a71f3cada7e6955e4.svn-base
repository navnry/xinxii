
/**
 * getUrlParam 获取页面路径对应参数
 * @param  name 字段名
 * @return 目标值 
 */

export function getUrlParam (name) {
    let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)") //构造一个含有目标参数的正则表达式对象
    let r = window.location.search.substr(1).match(reg) //匹配目标参数
    if (r != null) return unescape(r[2])
    return null //返回参数值
}


/**
 * [formatTime 格式化时间戳]
 * @param  {[type]} time [时间戳]
 * @param  {[type]} fmt  [显示的模板,eg. 'YYYY/MM/DD/HH:mm:ss']
 * @return {[type]}      [description]
 */
export function formatTime (time, fmt = 'yyyy-MM-dd hh:mm') {
    if (!time) return ''
    time = new Date(time)
    let o = {
        'M+': time.getMonth() + 1, // 月份
        'd+': time.getDate(), // 日
        'h+': time.getHours(), // 小时
        'm+': time.getMinutes(), // 分
        's+': time.getSeconds(), // 秒
        'q+': Math.floor((time.getMonth() + 3) / 3), // 季度
        'S': time.getMilliseconds() // 毫秒
    }
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (time.getFullYear() + '').substr(4 - RegExp.$1.length))
    for (let k in o) {
        if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)))
    }
    return fmt
}
//身份证验证
export function IdentityCodeValid(code) {
    let city = {11:'北京',12:'天津',13:'河北',14:'山西',15:'内蒙古',21:'辽宁',22:'吉林',23:'黑龙江',31:'上海',32:'江苏',33:'浙江',34:'安徽',35:'福建',36:'江西',37:'山东',41:'河南',42:'湖北',43:'湖南',44:'广东',45:'广西',46:'海南',50:'重庆',51:'四川',52:'贵州',53:'云南',54:'西藏',61:'陕西',62:'甘肃',63:'青海',64:'宁夏',65:'新疆',71:'台湾',81:'香港',82:'澳门',91:'国外'}
    let tip = ''
    let pass= true
    if (!code || !/^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/i.test(code)) {
        tip = '身份证号格式错误'
        pass = false
    } else if (!city[code.substr(0,2)]) {
        tip = '地址编码错误'
        pass = false
    } else {
      //18位身份证需要验证最后一位校验位
        // if (code.length === 18) {
        //     code = code.split('')
        //     //∑(ai×Wi)(mod 11)
        //     //加权因子
        //     let factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]
        //     //校验位
        //     let parity = [1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2]
        //     let sum = 0
        //     let ai = 0
        //     let wi = 0
        //     for (let i = 0; i < 17; i++) {
        //         ai = code[i]
        //         wi = factor[i]
        //         sum += ai * wi
        //     }
        //     let last = parity[sum % 11]
        //     if(parity[sum % 11] != code[17]){
        //         tip = '校验位错误'
        //         pass = false
        //     }
        // }
    }
    return pass
}
/**
 * [lastDateTime 格式化时间为和当前比较时间]
 * @param  {[type]} time [时间戳]
 * @return {[type]}      [description]
 */
export function lastDateTime (time) {
    if (!time) {
        return ''
    }
    let newDate = new Date()
    const cd = newDate.getTime() - time
    let ret = ''
    if (cd < 60000) {
        ret = '刚刚'
    } else if (cd < 3600000) {
        ret = Math.ceil(cd / 60000) + '分钟前'
    } else if (cd < 86400000) {
        ret = Math.round(cd / 3600000) + '小时前'
    } else if (cd < 259200000) {
        ret = Math.round(cd / 86400000) + '天前'
    } else {
        ret = formatTime(time)
    }
    return ret
}
// 截取字符串长度
export function subString (str, length) {
    let returnStr = ''
    if (typeof str !== 'string') {
        return ''
    }
    if (str.length > length) {
        returnStr = str.slice(0, length) + '...'
    } else {
        returnStr = str
    }
    return returnStr
}
// 隐藏手机号中间4位
export function formatPhone (phone) {
    if (phone && phone.length >= 11) {
        return phone.replace(/^(\d{3})\d{4}(\d{4})$/,'$1****$2')
    } else {
        return ''
    }
}
export function login () {
    return new Promise(function (resolve, reject) {
        uni.login({
            provider: 'weixin',
            success (res) {
                console.log(res)
                if (res.code) {
                    resolve(res.code)
                } else {
                    resolve('')
                }
            }
        })
    })
}

export function checkLogin (store) {
    return new Promise(function (resolve, reject) {
        uni.checkSession({
            success () {
                resolve(true)
            },
            fail () {
                store.commit('LOGOFF')
                resolve(false)
            }
        })
    })
}
// 验证手机号
export function checkPhone (phone) {
    if (!phone) return false
    if(/^1\d{10}$/.test(phone)){ 
        return true
    } else {
        return false
    }
}


// 参数转成get方式
export function concatParams (params) {
    let paramsStr = ''
    for (let k in params) {
        paramsStr += k + '=' + params[k] + '&'
    }
    paramsStr = '?'+ paramsStr.substr(0, paramsStr.length - 1)
    return paramsStr
}

export function formatStorage(arr,name,key){ // 处理搜索历史记录
	let flag = true
	let list = [...arr]
	if(list){
		list.forEach((val,index) => {
			if(val == name){
				flag = false
				list.splice(index,1)
				list.unshift(val)
			}
		})
	}
	if(flag){
		list.unshift(name)
	}
	uni.setStorage({
        key: key,
        data: JSON.stringify(list),
	});
}

// // 获取配置信息
// export function getConigInfo (vue, str, cb) {
//     let param = {}
//     if (str) {
//         param.config_str = str
//     }
//     vue.$api.post('common/configinfo', param, {showLoading: false}).then( res => {
//         if(res.code == 1){
//             vue.$store.commit('SET_CONFIGINFO', res.data)
//             cb && cb(res.data)
//         }
//     })
// }
export function startWgt (vue,data){
    //注意：服务器的热更新版本号必需大于本地wgt版本号
    //http://192.168.50.201/update.wgt,
    let topIconPath=plus.io.convertLocalFileSystemURL(vue.iconRootPath)+"/pages/static/upload_bg.png";
    //第一步要获取本地的wgt版本号；
    const upDater=uni.requireNativePlugin("CL-UpDater");
    let options={
        title: "更新提示",
        con: data.remarks,
        downUrl: data.file,
        hidCancelbtn: false,
        btnBgColor: "#ff5000",
        topImgBg: topIconPath//除非需要自定义头部logo，否则不需要传;
    }
    
    //第一步创建文件下载路径，并创建文件;
    plus.io.requestFileSystem(plus.io.PUBLIC_DOWNLOADS,function(fobject){
        //设置文件下载根路径;	
        let rootPath = fobject.root.fullPath;
        upDater.wgtUpdate(options,rootPath,result=>{
            if(result) {
                var pathNew = plus.io.convertAbsoluteFileSystem(result);
                plus.runtime.install(pathNew, {
                    force: false
                }, function() {
                    //进行重新启动;
                    plus.runtime.restart()
                }, (e) => {
                    vue.showToast('安装升级包失败'+JSON.stringify(e))
                })
            }
        },()=>{
            console.log("弹框关闭了");
        })
    })
}
export function checkUpdateApp (vue,type) {
    let version = null
    plus.runtime.getProperty( plus.runtime.appid, function ( wgtinfo ) {
        version = wgtinfo.version
    })
    let appSource = 'Android'
    if (uni.getSystemInfoSync().platform === 'ios') {
        appSource =  'ios'
    } 
    console.log(appSource);
    vue.$api.get('member/login/getNewVersion.do?type=' + appSource).then( res => {
        console.log(res);
        const upDater=uni.requireNativePlugin("CL-UpDater")
        if(res.success){
            if (compareVersion(res.data.versionNumber, version) <= 0) return
            if(res.data.rangeType == 1){
                uni.showModal({
                    title: '更新提示',
                    content: res.data.remarks,
                    success: (ee) => {
                        if (ee.confirm) {
                            let url = res.data.file
                            if(appSource == 'ios'){
                                url = 'https://apps.apple.com/cn/app/%E7%A6%A7%E5%B0%8F%E4%BF%9D/id1531454953'
                            }
                            plus.runtime.openURL(url)
                        }
                    }
                })
            }else if(res.data.rangeType == 2){
                startWgt(vue,res.data)
            }
        }
    })
}
// 判断两个版本号谁大
// compareVersion('1.2.4', '1.1.5') // 1
// compareVersion('1.2', '1.10.5') // -1
// compareVersion('1.00.03', '1.0.03') // 0
export function compareVersion (version1, version2) {
    const arr1 = version1.split('.')
    const arr2 = version2.split('.')
    const length1 = arr1.length
    const length2 = arr2.length
    const minlength = Math.min(length1, length2)
    let i = 0
    for (i ; i < minlength; i++) {
        let a = parseInt(arr1[i])
        let b = parseInt(arr2[i])
        if (a > b) {
            return 1
        } else if (a < b) {
            return -1
        }
    }
    if (length1 > length2) {
        for(let j = i; j < length1; j++) {
            if (parseInt(arr1[j]) != 0) {
                return 1
            }
        }
        return 0
    } else if (length1 < length2) {
        for(let j = i; j < length2; j++) {
            if (parseInt(arr2[j]) != 0) {
                return -1
            }
        }
        return 0
    }
    return 0
}

/**
	 * appSource 判断APP系统
	 */
export function appSource() {
    if (uni.getSystemInfoSync().platform === 'ios') {
        return 'ios'
    } else {
        return 'android'
    }
}

export function formatMin (time) {
    if (time) {
        let m = Math.floor(time / 60)
        let s = time % 60
        console.log(m, s)
        if (m > 0 && s > 0) {
            return (m >= 10 ? m : '0' + m) + ':' + (s >= 10 ? s : '0' + s)
        } else if (m > 0) {
            return m >= 10 ? m : '0' + m
        } else {
            return s + '秒'
        }
    } else {
        return ''
    }
}