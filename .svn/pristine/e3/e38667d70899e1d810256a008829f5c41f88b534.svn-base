<template>
	<view class="content">
		<x-nav-bar :no-border="true" title="保费试算"></x-nav-bar>
		<view class="info">

			<!-- 被保人信息 -->
			<view class="info-box">
				<view class="info-box-title"><text>被保人信息</text></view>
				<m-list-item title="被保人出生日期" tips="注：28天（含）-55周岁（含）">
					<picker slot="right" mode="date" color="#999999" :start="insuredStartDate" :end="insuredEndDate" :value="insuredBirth"
					 @change="bindInsuredDateChange">
						<view class="date-view">{{insuredBirth}}</view>
					</picker>
				</m-list-item>
				<view class="m-con" v-for="(item,n) in productData">
					<view class="con-title">{{item.name}}</view>
					<view class="con-box" :class="item.list.length < 3 ? 'two': (item.list.length == 4) ? 'four' : 'three'">
						<view class="con-item" v-for="(oItem,index) in item.list" :key="index" :class="[oItem.isShow?'':'noneActive',subIndex[n] == index?'productActive':'']"
						 @click="chooseItem(oItem.name,n,$event,index)">
							<text>{{oItem.name}}</text>
						</view>
					</view>
				</view>
			</view>


		</view>
		<view class="reckon">
			<view class="reckon-wrap">
				<view class="price">
					<text>{{resultPrice}}</text>
					<text class="sec-text">元/起</text>
				</view>
				<view class="btn">
					<button type="default" @click="toPay(detail.insuranceLink)">立即投保</button>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import {
		formatTime,
		getAge,
		getDisableDate,
		getDisableDateDay
	} from '../../common/utils/index.js'
	import { mapState } from 'vuex'
	export default {
	    computed: mapState(['isLogin','userinfo']),
		data() {
			return {
				detail:{},
				//被保人
				insuredBirth: '请选择',
				insuredStartDate: '',
				insuredEndDate: '',

				productData: [{
						name: '被保人性别',
						attribute: 'gander',
						list: [{
							name: "男",
							attribute: '1',
							optional: true
						}, {
							name: "女",
							attribute: '0',
							optional: true
						}]
					},
					{
						name: '是否有医保',
						attribute: 'planCode',
						list: [{
							name: '不含',
							attribute: '2',
							optional: true
						}, {
							name: '含',
							attribute: '1',
							optional: true
						}]
					}
				],
				resultPrice: '---', // 试算结果
				selectArr: [], //存放被选中的值
				shopItemInfo: {}, //存放要和选中的值进行匹配的数据
				subIndex: [], //是否选中 
				planArr: [],
				plan: '',
				sendData: {
					// baseAmount: 0, //基本保额
					indemnityAmount: 300000, //总保额
					gander: '', //被保人性别
					age: '', //被保人年龄
					paymentPeriod: '', //交费期限(年)
					guaranteePeriod: '', //保障期
					planCode: '', //计划代码
					productCode: '', //产品代码
					companyCode: '', //公司代码
					exemptType: '', //豁免类型 1:被保人豁免 2：投保人豁免 空则是无豁免
					trialType: 'Client', //保费试算类型(1.Api; 2.Client)
					policyholderAge: '', //投保人年龄
					policyholderGander: '', //投保人性别
					rateType:2
				},
				insuranceLink:''//投保链接
			}
		},
		onLoad(option) {
			this.insuredStartDate = getDisableDate(56) //被保人最大年龄限制
			this.insuredEndDate = getDisableDateDay(29) //被保人最小年龄限制
			this.sendData.exemptType = '' //设置无豁免类型
			this.checkItem(-1);
			
			let data = JSON.parse(decodeURIComponent(option.data))
			this.detail = data
			this.insuranceLink = data.insuranceLink
			this.sendData.productCode = data.serialNumber
			this.sendData.companyCode = data.producerCode
			this.sendData.trialType = data.trialType
			this.sendData.rateType = data.rateType
			console.log(data)
			this.getAmount()
		},
		methods: {
			bindInsuredDateChange(e) {
				let insuredAge = getAge(e.target.value)
				this.insuredBirth = e.target.value
				this.sendData.age = insuredAge
				
				this.getAmount()
			},
			
			chooseItem(item, n, event, index) {
				let mChecked = this.productData[n].attribute //选中行
				let mCheckedItem = this.productData[n].list[index] //选中行的子列表
				

				if (this.selectArr[n] != item) {
					// this.$set(this.selectArr, n, item);
					this.$set(this.subIndex, n, index);
					
					if (mChecked == 'gander') {
						mCheckedItem.attribute == '0' ? this.sendData.gander = 0 : this.sendData.gander = 1
					}
					
					if (mChecked == 'planCode') {
						mCheckedItem.attribute == '1' ? this.sendData.planCode = 1 : this.sendData.planCode = 2
					}

				} else {
					// this.$set(this.selectArr, n, '');
					this.$set(this.subIndex, n, -1); //去掉选中颜色
				}
				this.getAmount()
				// console.log(this.sendData)
				this.checkItem(n);
			},

			checkItem(clickIndex) {
				var option = this.productData;
				for (let i = 0, len = option.length; i < len; i++) {
					if (i == clickIndex) {
						continue;
					}
					let len2 = option[i].list.length;
					for (let j = 0; j < len2; j++) {
						if (this.subIndex[i] != -1 && j == this.subIndex[i]) {
							continue;
						}
						this.$set(this.productData[i].list[j], 'isShow', true);
					}
				}
			},
			getAmount(){
				this.resultPrice = '---'
				this.$api.post('pdc/product/premium.do',this.sendData).then(res=>{
					console.log(res)
					
					if(res.success){
						this.resultPrice = res.data.toFixed(2)
					}
				}).catch(err=>{
					console.log(err)
				})
			},
			insure(url){
			    let data = {
			        url,
			        type: this.detail.insuranceType,
			        linkType: this.detail.linkType,
			        name:this.detail.producerName
			    }
			    uni.navigateTo({
			        url: '../ebook/productnotify?data=' + encodeURIComponent(JSON.stringify(data))
			    })
			},
			toPay(url){
			    // #ifndef H5
			    if(!this.isLogin){
			    	this.$refs.modal.open()
			        return
			    }else{
			        if(this.userinfo.reviewResultCode&&this.userinfo.reviewResultCode.code==5){
			            this.insure(url)
			        }else{
			            this.$refs.modal1.open()
			        }
			    }
			    // #endif
			    // #ifdef H5
			    this.insure(url)
			    // #endif
			    
			},
		}
	}
</script>
<style lang="less" scoped>
	.content{padding: 0 24rpx 170rpx;}
	.info{
		.info-box{padding: 24rpx 0;background-color: #FFFFFF;margin-top: 24rpx;border-radius: 12rpx;
			.info-box-title{position: relative;display: flex;align-items: center;padding: 0 24rpx;margin-bottom: 48rpx;
				&::before{content: "";display: block;width: 6rpx;height: 34rpx;background: #FF5000;border-radius: 3rpx;margin-right: 8rpx;}
				>text{font-size: 36rpx;font-weight: 500;line-height: 50rpx;}
			}
		}
		
		.m-con{padding: 22rpx 24rpx 0;
			.con-title{margin-bottom: 24rpx;
				>text{font-size: 34rpx;font-weight: 400;line-height: 48rpx;}
			}
			.con-box{display: flex;flex-wrap: wrap; align-content: flex-start;justify-content: space-between;border-bottom: 1rpx solid #F0F0F0;padding-bottom: 24rpx;
				&:after{content: '';width: calc(33% - 12rpx);}
				&.no-border{border-bottom:0;padding-bottom: 0;}
				&.two{.con-item{width: calc(50% - 12rpx);}}
				&.four{.con-item{width: calc(25% - 18rpx);}}
				&.three{.con-item{width: calc(33.33% - 16rpx);margin-top: 24rpx;&:nth-child(-n+3){margin-top: 0;}}}
				.con-item{line-height: 64rpx;background: #F4F5F6;border-radius: 6rpx;text-align: center;position: relative;
					&.productActive{background: #FFDCCC;
						>text{color: #FF5000;}
						&::before{content: '';position: absolute;width: 38rpx;height: 38rpx;background: url(../../static/checked.png) center/cover no-repeat;right: 0;bottom: 0;}
					}
					&.noneActive{pointer-events: none;background-color: #ccc;opacity: 0.4;}
					>text{font-size: 32rpx;font-weight: 400;line-height: 44rpx;}
				}
			}
			&:last-child{
				.con-box{border-bottom: 0;padding-bottom: 0;}
			}
		}
	}
	
	.reckon{position: fixed;bottom: 0;left: 0;;width: 100%;height: 120rpx;background: #FFFFFF;border-top: 2rpx solid #EBEDF0;padding: 16rpx 24rpx;
		.reckon-wrap{display: flex;align-items: center;justify-content: space-between;
			.price{flex: 1;margin-right: 24rpx;color: #FF5000;font-size: 48rpx;
				.sec-text{font-size: 28rpx;font-weight: 400;line-height: 40rpx;margin-left: 4rpx;}
			}
			.btn{
				button{width: 232rpx;height: 88rpx;background: #FF5000;border-radius: 6rpx;font-size: 34rpx;font-weight: 500;color: #FFFFFF;line-height: 88rpx;}
			}
		}
	}
</style>
